# Penjelasan Program Rute Terbaik dengan A*

## Bagian 1: Impor Library dan Inisialisasi

```python
import pygame
import sys
import math
import heapq

pygame.init()
```

Bagian ini mengimpor semua library yang dibutuhkan:
- `pygame` untuk membuat tampilan grafis
- `sys` untuk keluar dari program
- `math` untuk perhitungan matematika
- `heapq` untuk antrian prioritas dalam algoritma A*

Kemudian program menginisialisasi pygame.

## Bagian 2: Memuat Gambar Peta

```python
try:
    map_image = pygame.image.load("map2.jpg")
except pygame.error as e:
    print("Error: Tidak dapat memuat gambar peta 'map2.jpg'. Pastikan file ada di folder yang sama.")
    sys.exit(1)

map_rect = map_image.get_rect()
```

Program mencoba memuat gambar peta dari file "map2.jpg". Jika gagal, program akan menampilkan pesan error dan keluar. Kemudian program menyimpan ukuran gambar dalam variabel `map_rect`.

## Bagian 3: Membuat Layar dan Pengaturan Dasar

```python
screen = pygame.display.set_mode((map_rect.width, map_rect.height + 50))
pygame.display.set_caption("Rute Terbaik dengan A*")
```

Program membuat jendela tampilan dengan lebar dan tinggi sesuai gambar peta plus 50 piksel tambahan di bawah untuk menampilkan informasi. Kemudian program memberi judul jendela.

## Bagian 4: Menentukan Lokasi Rumah dan Persimpangan

```python
houses = {
    "Dental": (200, 120),  
    "Bakmi": (210, 750), 
    "Gereja": (700, 780), 
    "Nutrihub": (430, 770), 
}

intersections = {
    "A": (40, 30),
    # ... (banyak persimpangan lainnya)
    "R": (210, 770),
}
```

Program mendefinisikan:
- Lokasi rumah-rumah dengan nama dan koordinat (x,y) dalam piksel
- Lokasi persimpangan jalan dengan nama (A-R) dan koordinat (x,y) dalam piksel

## Bagian 5: Membuat Graf Jalan

```python
graph = {
    "A": {"B": 64, "C": 9},
    "B": {"A": 64, "K": 18},
    # ... (banyak jalur lainnya)
}
```

Program mendefinisikan graf jalan. Setiap kunci adalah nama persimpangan, dan nilainya adalah persimpangan lain yang terhubung langsung beserta jaraknya. Contoh: dari persimpangan A, kita bisa pergi ke B dengan jarak 64 atau ke C dengan jarak 9.

## Bagian 6: Fungsi Penghitung Jarak

```python
def calculate_distance(pos1, pos2):
    return math.sqrt((pos2[0] - pos1[0]) ** 2 + (pos2[1] - pos1[1]) ** 2)
```

Fungsi ini menghitung jarak garis lurus (Euclidean) antara dua titik. Digunakan untuk:
1. Menghitung jarak heuristik dalam algoritma A*
2. Mendeteksi klik mouse di dekat rumah
3. Menentukan persimpangan terdekat dari rumah

## Bagian 7: Algoritma A*

```python
def a_star(graph, start, end, intersections):
    open_set = [(0, start)]
    came_from = {node: None for node in graph}
    g_score = {node: float('infinity') for node in graph}
    g_score[start] = 0
    f_score = {node: float('infinity') for node in graph}
    f_score[start] = calculate_distance(intersections[start], intersections[end])
    
    # ... (implementasi algoritma)
    
    return path, g_score[end]
```

Ini adalah implementasi algoritma A* yang mencari rute terpendek dari titik awal ke titik akhir:

1. `open_set`: Antrian prioritas untuk menyimpan titik yang akan dieksplorasi
2. `came_from`: Menyimpan dari mana kita datang untuk setiap titik
3. `g_score`: Menyimpan jarak sebenarnya dari start ke tiap titik
4. `f_score`: Menyimpan perkiraan total jarak (g_score + heuristik)

Algoritma menggunakan heuristik (jarak garis lurus) untuk memperkirakan jarak ke tujuan, sehingga lebih efisien daripada mencoba semua jalur.

## Bagian 8: Variabel untuk Menyimpan Status Program

```python
start_point = None
end_point = None
path = None
total_cost = 0
```

Variabel-variabel ini menyimpan:
- `start_point`: Rumah awal yang dipilih
- `end_point`: Rumah tujuan yang dipilih
- `path`: Jalur yang ditemukan oleh algoritma A*
- `total_cost`: Total jarak jalur yang ditemukan

## Bagian 9: Fungsi untuk Tombol Reset

```python
reset_button_rect = pygame.Rect(10, map_rect.height + 10, 100, 30)

def draw_button():
    pygame.draw.rect(screen, (255, 0, 0), reset_button_rect)
    font = pygame.font.Font(None, 24)
    text = font.render("Reset", True, (255, 255, 255))
    text_rect = text.get_rect(center=reset_button_rect.center)
    screen.blit(text, text_rect)
```

Program mendefinisikan tombol reset:
- Posisi dan ukuran tombol
- Fungsi untuk menggambar tombol dengan warna merah dan teks "Reset"

## Bagian 10: Fungsi untuk Format Jalur dan Reset

```python
def format_path(start, end, path_nodes, cost):
    path_str = f"Path: {start} → "
    for node in path_nodes:
        path_str += f"{node} → "
    path_str += f"{end} (Cost: {int(cost)})"
    return path_str

def reset():
    global start_point, end_point, path, total_cost
    start_point = None
    end_point = None
    path = None
    total_cost = 0
    print("Reset titik start, end, dan rute.")
```

- `format_path`: Fungsi untuk memformat jalur menjadi teks yang ditampilkan
- `reset`: Fungsi untuk mengembalikan semua variabel ke kondisi awal

## Bagian 11: Loop Utama Program

```python
running = True
while running:
    for event in pygame.event.get():
        # ... (penanganan event)
        
    # ... (menggambar komponen visual)
    
    pygame.display.flip()
```

Ini adalah loop utama program yang terus berjalan hingga pengguna menutup jendela. Di dalam loop ini, program:
1. Menangani event dari pengguna (klik mouse, tekan tombol)
2. Menggambar semua komponen visual
3. Memperbarui tampilan layar

## Bagian 12: Penanganan Event

```python
if event.type == pygame.QUIT:
    running = False
elif event.type == pygame.MOUSEBUTTONDOWN:
    mouse_pos = event.pos
    # Cek apakah tombol reset diklik
    if reset_button_rect.collidepoint(mouse_pos):
        reset()
    else:
        # Cek apakah klik berada dekat dengan salah satu rumah
        # ... (kode untuk memilih rumah dan menghitung rute)
elif event.type == pygame.KEYDOWN:
    if event.key == pygame.K_r:  # Tekan 'R' untuk reset
        reset()
```

Program menangani tiga jenis event:
1. Jika pengguna menutup jendela, program berhenti
2. Jika pengguna mengklik mouse:
   - Jika klik pada tombol reset, program mereset semua pilihan
   - Jika klik dekat rumah, program memilih rumah sebagai start atau end
3. Jika pengguna menekan tombol 'R', program mereset semua pilihan

## Bagian 13: Menggambar Komponen Visual

```python
# Bersihkan layar
screen.fill((255, 255, 255))

# Gambar peta
screen.blit(map_image, map_rect)

# Gambar tombol reset
draw_button()

# Gambar titik rumah
# ... (kode untuk menggambar rumah)

# Gambar titik persimpangan
# ... (kode untuk menggambar persimpangan)

# Gambar titik start dan end
# ... (kode untuk menggambar start dan end)

# Gambar rute
# ... (kode untuk menggambar jalur)
```

Program menggambar semua komponen visual:
1. Latar belakang putih
2. Gambar peta
3. Tombol reset
4. Titik-titik rumah dengan labelnya
5. Titik-titik persimpangan dengan labelnya
6. Titik start dan end dengan warna berbeda
7. Jalur yang ditemukan dengan garis kuning
8. Teks yang menunjukkan jalur yang ditemukan

## Bagian 14: Mengakhiri Program

```python
pygame.quit()
sys.exit()
```

Kode ini dijalankan ketika program selesai, untuk menutup jendela pygame dan keluar dari program.

Secara keseluruhan, program ini adalah visualisasi algoritma A* untuk mencari rute terpendek antara dua rumah melalui jaringan jalan yang direpresentasikan sebagai graf. Pengguna dapat memilih rumah awal dan tujuan dengan mengklik, dan program akan menampilkan rute terpendek beserta jaraknya.